{"mappings":"qmCAAAA,EAAAC,QAAA,SAAAC,GACA,IACAC,EAAA,uBAIAC,EAAA,GAAAC,EAAA,GAEAC,EAAA,SAAAC,GAAA,MAAA,CAEAC,UAAA,SAAAC,MAAA,KAAAF,EAAA,MAAAA,IAGAG,EAAA,SAAAC,EAAAF,EAAAG,GAAA,MAAA,CACAJ,UAAAG,EAAAF,MAAAA,EAAAG,UAAAA,IAGAC,EAAA,CAEAJ,MAAA,MAAAK,IAAA,MAAAC,SAAAV,EAAAO,UAAA,GAIAP,EAAAW,KACAd,EAAAe,oBACAf,EAAAgB,qBACAZ,EAAA,KACAA,EAAA,KACAJ,EAAAiB,gBACA,CACAV,MAAA,oBACAW,OAAA,CAAAZ,UAAA,SAAAM,IAAA,WAAAO,YAAA,IAEAX,EAAA,SAAA,oBACAG,EACAH,EAAA,WAAA,aAAA,IACAA,EAAA,WAAA,cACAA,EAAA,WAAA,cACA,CACAF,UAAA,YAAAC,MAAAa,eAAAR,IAAA,IAAAS,aAAA,EAAAF,YAAA,GAEA,CACAb,UAAA,OACAC,MAAA,eAIA,IAAAe,EAAAnB,EAAAoB,OAAA,CACAhB,MAAA,IAAAK,IAAA,IAAAC,SAAAX,IAGAsB,EAAA,CACAC,cAAA,OAAAC,gBAAA,EACAb,SAAA,CAAA,CAAAY,cAAA,YAAAF,OAAApB,IAKAwB,EAAA,CACApB,MAAAN,EAAA,QAAAoB,aAAA,EAAAT,IAAA,OACAF,UAAA,EACAG,SAAA,CACA,CACAP,UAAA,YACAC,MAAAN,EAAAW,IAAA,IAAAO,YAAA,EACAD,OAAA,CACAQ,gBAAA,EAAAE,QAAA,QACAlB,UAAA,EACAG,SAAAV,MAMA0B,EAAA,CACAvB,UAAA,UACAC,MAAA,2GACAW,OAAA,CAAAN,IAAA,QAAAkB,WAAA,EAAAjB,SAAAV,EAAAO,UAAA,IAIAqB,EAAA,CACAzB,UAAA,WACA0B,SAAA,CAKA,CAAAzB,MAAA,gBAAAG,UAAA,IACA,CAAAH,MAAA,aAEAW,OAAA,CAAAN,IAAA,OAAAkB,WAAA,EAAAjB,SAAAS,IAGAW,EAAA,CAIAD,SAAA,CAAA,CACAzB,MAAA,eAAAK,IAAA,SACA,CACAL,MAAAN,EAAAW,IAAA,MAEAS,aAAA,EACAS,WAAA,EACAF,QAAA,WACAlB,UAAA,EACAG,SAAA,CACAb,EAAAe,oBACAf,EAAAgB,qBACAQ,EACAhB,EAAA,UAAA,UACAA,EAAA,WAAA,cACAA,EAAA,eAAAP,EAAA,KAAA,GACAO,EAAA,cAAA,IAAAP,GACAO,EAAA,iBAAA,MAAAP,EAAA,GACAO,EAAA,eAAA,IAAA,GACA,CAAAF,UAAA,gBAAAC,MAAA,MAAAK,IAAA,OACA,CAAAN,UAAA,kBAAAC,MAAA,kCACA,CAAAA,MAAA,MAAAK,IAAA,MAAAC,SAAAS,GACA,CAAAf,MAAA,gBAaA,OATAL,EAAAY,KACAd,EAAAe,oBACAf,EAAAgB,qBACAa,EACAE,EACAJ,EACAM,GAGA,CACAC,kBAAA,EACAN,QAAA,cACAf,SAAAX","sources":["./node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/less.js"],"sourcesContent":["module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};"],"names":["module","exports","hljs","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","PARENS_MODE","end","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","IDENT_RE","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"],"version":3,"file":"less.adc7fbec.js.map"}